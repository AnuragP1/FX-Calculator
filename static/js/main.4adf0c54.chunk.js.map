{"version":3,"sources":["Converter.js","App.js","serviceWorker.js","index.js"],"names":["rates","crNames","Object","keys","Converter","state","result","resultCurrency","fromCurrency","toCurrency","amount","currencies","convertHandler","setState","Math","round","toFixed","selectHandler","event","target","name","value","this","sort","className","onChange","map","cur","key","type","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOAIMA,G,MAAQ,CACV,IAAO,EAAI,MACX,IAAO,EAAI,MACX,IAAO,OACP,IAAO,EAAI,OACX,IAAO,EAAI,OACX,IAAO,EACP,IAAO,EAAI,KACX,IAAO,OACP,IAAO,QAAU,OACjB,IAAO,OAAS,OAChB,IAAO,OAAS,SAIdC,EAAUC,OAAOC,KAAKH,GAyFbI,E,2MAtFXC,MAAQ,CACJC,OAAQ,KACRC,eAAgB,KAChBC,aAAc,MACdC,WAAY,MACZC,OAAQ,EACRC,WAAY,I,EAShBC,eAAiB,WACb,GAAI,EAAKP,MAAMG,eAAiB,EAAKH,MAAMI,WAAY,CACnD,IAAMH,EAAS,EAAKD,MAAMK,QAAUV,EAAM,EAAKK,MAAMI,YAAcT,EAAM,EAAKK,MAAMG,eACtD,QAA1B,EAAKH,MAAMI,WACX,EAAKI,SAAS,CAAEP,OAAQQ,KAAKC,MAAMT,KAEnC,EAAKO,SAAS,CAAEP,OAAQA,EAAOU,QAAQ,UAG3C,EAAKH,SAAS,CAAEP,OAAQ,EAAKD,MAAMK,SAGvC,EAAKG,SAAS,CAAEN,eAAgB,EAAKF,MAAMI,c,EAI/CQ,cAAgB,SAACC,GACa,SAAtBA,EAAMC,OAAOC,MACb,EAAKP,SAAS,CAAEL,aAAcU,EAAMC,OAAOE,QAErB,OAAtBH,EAAMC,OAAOC,MACb,EAAKP,SAAS,CAAEJ,WAAYS,EAAMC,OAAOE,S,mFAzB7CC,KAAKT,SAAS,CAAEF,WAAYV,EAAQsB,W,+BA6B9B,IAAD,OACL,OACI,yBAAKC,UAAU,aACX,4BAAI,2CAAJ,eACA,yBAAKA,UAAU,QACX,oCACA,4BACQJ,KAAK,OACLK,SAAU,SAACP,GAAD,OAAW,EAAKD,cAAcC,IACxCG,MAAOC,KAAKjB,MAAMG,cAEjBc,KAAKjB,MAAMM,WAAWe,IAAI,SAAAC,GAAG,OAC1B,4BAAQC,IAAKD,GAAMA,MAG3B,2BACIP,KAAK,SACLS,KAAK,OACLR,MAAOC,KAAKjB,MAAMK,OAClBe,SAAU,SAAAP,GAAK,OACX,EAAKL,SAAS,CAAEH,OAAQQ,EAAMC,OAAOE,YAGjD,6BACA,kCACA,4BACQD,KAAK,KACLK,SAAU,SAACP,GAAD,OAAW,EAAKD,cAAcC,IACxCG,MAAOC,KAAKjB,MAAMI,YAEjBa,KAAKjB,MAAMM,WAAWe,IAAI,SAAAC,GAAG,OAC1B,4BAAQC,IAAKD,GAAMA,OAG/B,6BACA,4BAAQG,QAASR,KAAKV,gBAAtB,YAGAU,KAAKjB,MAAMC,QACX,iCAAOgB,KAAKjB,MAAME,eAAlB,IAAmCe,KAAKjB,MAAMC,a,GAhF1CyB,aCZTC,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.4adf0c54.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport './Converter.css';\r\n\r\nconst rates = {\r\n    \"AUD\": 1 / 0.8371,\r\n    \"CAD\": 1 / 0.8711,\r\n    \"CNY\": 6.1715,\r\n    \"EUR\": 1 / 1.2315,\r\n    \"GBP\": 1 / 1.5683,\r\n    \"USD\": 1,\r\n    \"NZD\": 1 / 0.7750,\r\n    \"JPY\": 119.95,\r\n    \"CZK\": 27.6028 / 1.2315,\r\n    \"DKK\": 7.4405 / 1.2315,\r\n    \"NOK\": 8.6651 / 1.2315,\r\n}\r\n\r\n//Keys of rates mapped\r\nconst crNames = Object.keys(rates);\r\n\r\nclass Converter extends Component {\r\n    state = {\r\n        result: null,\r\n        resultCurrency: null,\r\n        fromCurrency: \"AUD\",\r\n        toCurrency: \"USD\",\r\n        amount: 1,\r\n        currencies: [],\r\n    };\r\n\r\n    // Add currencies to state\r\n    componentDidMount() {\r\n        this.setState({ currencies: crNames.sort() })\r\n    }\r\n\r\n    // Updates the states based on the dropdown that was changed\r\n    convertHandler = () => {\r\n        if (this.state.fromCurrency !== this.state.toCurrency) {\r\n            const result = this.state.amount * (rates[this.state.toCurrency] / rates[this.state.fromCurrency]);\r\n            if (this.state.toCurrency === \"JPY\") {\r\n                this.setState({ result: Math.round(result) })\r\n            } else {\r\n                this.setState({ result: result.toFixed(2) })\r\n            }\r\n        } else {\r\n            this.setState({ result: this.state.amount })\r\n        }\r\n\r\n        this.setState({ resultCurrency: this.state.toCurrency })\r\n    };\r\n\r\n    // Event handler for the conversion\r\n    selectHandler = (event) => {\r\n        if (event.target.name === \"from\") {\r\n            this.setState({ fromCurrency: event.target.value })\r\n        }\r\n        if (event.target.name === \"to\") {\r\n            this.setState({ toCurrency: event.target.value })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Converter\">\r\n                <h2><span>Currency </span> Converter </h2>\r\n                <div className=\"Form\">\r\n                    <h4>From:\r\n                    <select\r\n                            name=\"from\"\r\n                            onChange={(event) => this.selectHandler(event)}\r\n                            value={this.state.fromCurrency}\r\n                        >\r\n                            {this.state.currencies.map(cur => (\r\n                                <option key={cur}>{cur}</option>\r\n                            ))}\r\n                        </select>\r\n                        <input\r\n                            name=\"amount\"\r\n                            type=\"text\"\r\n                            value={this.state.amount}\r\n                            onChange={event =>\r\n                                this.setState({ amount: event.target.value })\r\n                            }\r\n                        /></h4>\r\n                    <br />\r\n                    <h4>To:\r\n                    <select\r\n                            name=\"to\"\r\n                            onChange={(event) => this.selectHandler(event)}\r\n                            value={this.state.toCurrency}\r\n                        >\r\n                            {this.state.currencies.map(cur => (\r\n                                <option key={cur}>{cur}</option>\r\n                            ))}\r\n                        </select></h4>\r\n                    <br />\r\n                    <button onClick={this.convertHandler}>Convert</button>\r\n                </div>\r\n                {\r\n                    this.state.result &&\r\n                    <h3>= {this.state.resultCurrency} {this.state.result}</h3>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Converter;\r\n\r\n","import React from 'react';\nimport Converter from './Converter';\n\nfunction App() {\n  return (\n    <Converter />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}